/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include <stdarg.h>
#include "zyre.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    zsock_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyZsock_t;


extern PyTypeObject PyZsock_t_Type;


typedef struct {
    PyObject_HEAD
    zpoller_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyZpoller_t;


extern PyTypeObject PyZpoller_t_Type;


typedef struct {
    PyObject_HEAD
    zmsg_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyZmsg_t;


extern PyTypeObject PyZmsg_t_Type;


typedef struct {
    PyObject_HEAD
    zyre_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyZyre_t;


extern PyTypeObject PyZyre_t_Type;

typedef char PYBYTE;

typedef struct {
    PyObject * callback;
    PyObject * loop;
    zsock_t * sock;
    int timeout;
} PyActorCallbackInfo;

static void
py_actor_callback (zsock_t *pipe, void *args)
{
    PyActorCallbackInfo * info = (PyActorCallbackInfo *) args;

    zsock_signal (pipe, 0);     //  Signal "ready" to caller
    bool terminated = false;

    zpoller_t *poller = zpoller_new (pipe, info->sock, NULL);

    while (!terminated) {
        void *which = zpoller_wait (poller, info->timeout);
        if (which == pipe) {
            zmsg_t *msg = zmsg_recv (which);
            if (!msg) {
                break;              //  Interrupted
            }
            char *command = zmsg_popstr (msg);
            if (streq (command, "$TERM")) {
                terminated = true;
            }
            free (command);
            zmsg_destroy (&msg);
        } else if (which == info->sock) {
            // Acquire the GIL
            PyGILState_STATE gil_state;
            gil_state = PyGILState_Ensure();
            // The callback can call zyre_recv, or whatever
            PyObject * method_name = Py_BuildValue("s", "create_task", 11);
            PyObject * args = Py_BuildValue("()");
            PyObject * coro = PyEval_CallObject(info->callback, args);
            PyObject_CallMethodObjArgs(info->loop, method_name, coro, NULL);
            Py_DECREF(coro);
            Py_DECREF(method_name);
            Py_DECREF(args);
            // Release the GIL
            PyGILState_Release(gil_state);
        }
    }
    // Acquire the GIL
    PyGILState_STATE gil_state;
    gil_state = PyGILState_Ensure();
    Py_DECREF(info->loop);
    Py_DECREF(info->callback);
    // Release the GIL
    PyGILState_Release(gil_state);
    free(info);
    zpoller_destroy(&poller);
}

PyObject *
zlist_of_str_to_pyset ( zlist_t * zlist )
{
    PyObject * set = PySet_New(NULL);
    void * chars;
    PyObject * string;
    while (zlist_size(zlist) > 0) {
        chars = zlist_pop(zlist);
        if (chars) {
            string = PyUnicode_FromString((char *) chars);
            PySet_Add(set, string);
            Py_DECREF(string);
        }
    }
    return set;
}

/* --- module functions --- */


PyObject *
_wrap_xzyre_zpoller_new()
{
    PyObject *py_retval;
    zpoller_t *retval;
    PyZpoller_t *py_zpoller_t;

    retval = zpoller_new(NULL);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zpoller_t = PyObject_New(PyZpoller_t, &PyZpoller_t_Type);

    py_zpoller_t->obj = retval;
    py_zpoller_t->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_zpoller_t);
    return py_retval;
}
PyObject * _wrap_xzyre_zpoller_new();


PyObject *
_wrap_xzyre_zpoller_add(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyZpoller_t *self;
    zpoller_t *self_ptr;
    PyZsock_t *reader;
    zsock_t *reader_ptr;
    const char *keywords[] = {"self", "reader", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyZpoller_t_Type, &self, &PyZsock_t_Type, &reader)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    reader_ptr = (reader ? reader->obj : NULL);
    retval = zpoller_add(self_ptr, reader_ptr);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zpoller_add(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);




static PyObject *
_wrap_zpoller_wait(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    void *retval;
    PyThreadState *py_thread_state = NULL;
    PyZpoller_t *self;
    zpoller_t *self_ptr;
    int timeout_ms;
    const char *keywords[] = {"self", "timeout_ms", NULL};
    PyZsock_t *py_zsock_t;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyZpoller_t_Type, &self, &timeout_ms)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zpoller_wait(self_ptr, timeout_ms);
    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zsock_t = PyObject_New(PyZsock_t, &PyZsock_t_Type);
    py_zsock_t->obj = (zsock_t *)retval;
    py_zsock_t->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_zsock_t);
    return py_retval;
}


PyObject * _wrap_xzyre_zpoller_wait(PyObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_zpoller_wait(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}
PyObject * _wrap_xzyre_zpoller_wait(PyObject *self, PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zpoller_expired(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyZpoller_t *self;
    zpoller_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZpoller_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zpoller_expired(self_ptr);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}
PyObject * _wrap_xzyre_zpoller_expired(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zmsg_new()
{
    PyObject *py_retval;
    zmsg_t *retval;
    PyZmsg_t *py_zmsg_t;

    retval = zmsg_new();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zmsg_t = PyObject_New(PyZmsg_t, &PyZmsg_t_Type);

    py_zmsg_t->obj = retval;
    py_zmsg_t->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_zmsg_t);
    return py_retval;
}
PyObject * _wrap_xzyre_zmsg_new();


PyObject *
_wrap_xzyre_zmsg_popstr(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *retval;
    PyZmsg_t *self;
    zmsg_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZmsg_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zmsg_popstr(self_ptr);
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zmsg_popstr(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zmsg_popbytes(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PYBYTE *retval;
    PyZmsg_t *self;
    zmsg_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZmsg_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zmsg_popstr(self_ptr);
    py_retval = Py_BuildValue((char *) "y", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zmsg_popbytes(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zmsg_pushstr(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyZmsg_t *self;
    zmsg_t *self_ptr;
    char const *string;
    const char *keywords[] = {"self", "string", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZmsg_t_Type, &self, &string)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zmsg_pushstr(self_ptr, string);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zmsg_pushstr(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zmsg_pushbytes(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyZmsg_t *self;
    zmsg_t *self_ptr;
    PYBYTE const *string;
    const char *keywords[] = {"self", "string", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!y", (char **) keywords, &PyZmsg_t_Type, &self, &string)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zmsg_pushstr(self_ptr, string);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zmsg_pushbytes(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_new(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    zyre_t *retval;
    char *name;
    const char *keywords[] = {"name", NULL};
    PyZyre_t *py_zyre_t;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &name)) {
        return NULL;
    }
    retval = zyre_new(name);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zyre_t = PyObject_New(PyZyre_t, &PyZyre_t_Type);

    py_zyre_t->obj = retval;
    py_zyre_t->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_zyre_t);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_new(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_uuid(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zyre_uuid(self_ptr);
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_uuid(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_name(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zyre_name(self_ptr);
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_name(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_header(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *name;
    char *value;
    const char *keywords[] = {"self", "name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ss", (char **) keywords, &PyZyre_t_Type, &self, &name, &value)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zyre_set_header(self_ptr, name, "%s", value);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_header(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_verbose(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    zyre_set_verbose(self_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_verbose(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_evasive_timeout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    int interval;
    const char *keywords[] = {"self", "interval", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyZyre_t_Type, &self, &interval)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    zyre_set_evasive_timeout(self_ptr, interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_evasive_timeout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_expired_timeout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    int interval;
    const char *keywords[] = {"self", "interval", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyZyre_t_Type, &self, &interval)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    zyre_set_expired_timeout(self_ptr, interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_expired_timeout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_interval(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    int interval;
    const char *keywords[] = {"self", "interval", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyZyre_t_Type, &self, &interval)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    zyre_set_interval(self_ptr, interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_interval(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_set_endpoint(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *value;
    const char *keywords[] = {"self", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &value)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    retval = zyre_set_endpoint(self_ptr, "%s", value);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_set_endpoint(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_gossip_bind(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *value;
    const char *keywords[] = {"self", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &value)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zyre_gossip_bind(self_ptr, "%s", value);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_gossip_bind(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_gossip_connect(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *value;
    const char *keywords[] = {"self", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &value)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zyre_gossip_connect(self_ptr, "%s", value);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_gossip_connect(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_start(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_start(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_start(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_stop(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zyre_stop(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_stop(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_join(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *group;
    const char *keywords[] = {"self", "group", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &group)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_join(self_ptr, group);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_join(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_leave(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *group;
    const char *keywords[] = {"self", "group", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &group)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_leave(self_ptr, group);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_leave(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_recv(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    zmsg_t *retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};
    PyZmsg_t *py_zmsg_t;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_recv(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zmsg_t = PyObject_New(PyZmsg_t, &PyZmsg_t_Type);

    py_zmsg_t->obj = retval;
    py_zmsg_t->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_zmsg_t);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_recv(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_whisper(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *peer;
    PyZmsg_t *msg;
    zmsg_t **msg_ptr;
    const char *keywords[] = {"self", "peer", "msg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!sO", (char **) keywords, &PyZyre_t_Type, &self, &peer, &msg)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    msg_ptr = &(msg->obj);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_whisper(self_ptr, peer, msg_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_whisper(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_shout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *group;
    PyZmsg_t *msg;
    zmsg_t **msg_ptr;
    const char *keywords[] = {"self", "group", "msg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!sO", (char **) keywords, &PyZyre_t_Type, &self, &group, &msg)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);
    msg_ptr = &(msg->obj);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_shout(self_ptr, group, msg_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_shout(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_whispers(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *peer;
    char *msg;
    const char *keywords[] = {"self", "peer", "msg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ss", (char **) keywords, &PyZyre_t_Type, &self, &peer, &msg)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_whispers(self_ptr, peer, "%s", msg);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_whispers(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_shouts(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *group;
    char *msg;
    const char *keywords[] = {"self", "group", "msg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ss", (char **) keywords, &PyZyre_t_Type, &self, &group, &msg)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_shouts(self_ptr, group, "%s", msg);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_shouts(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);




PyObject *
_wrap_zyre_peers(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zlist_t * peers = zyre_peers(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    PyObject * set = zlist_of_str_to_pyset(peers);
    zlist_destroy(&peers);
    return set;
}


PyObject * _wrap_xzyre_zyre_peers(PyObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_zyre_peers(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}
PyObject * _wrap_xzyre_zyre_peers(PyObject *self, PyObject *args, PyObject *kwargs);




PyObject *
_wrap_zyre_own_groups(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zlist_t * groups = zyre_own_groups(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    PyObject * set = zlist_of_str_to_pyset(groups);
    zlist_destroy(&groups);
    return set;
}


PyObject * _wrap_xzyre_zyre_own_groups(PyObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_zyre_own_groups(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}
PyObject * _wrap_xzyre_zyre_own_groups(PyObject *self, PyObject *args, PyObject *kwargs);




PyObject *
_wrap_zyre_peer_groups(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zlist_t * groups = zyre_peer_groups(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    PyObject * set = zlist_of_str_to_pyset(groups);
    Py_INCREF(set);
    zlist_destroy(&groups);
    return set;
}


PyObject * _wrap_xzyre_zyre_peer_groups(PyObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_zyre_peer_groups(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}
PyObject * _wrap_xzyre_zyre_peer_groups(PyObject *self, PyObject *args, PyObject *kwargs);




PyObject *
_wrap_zyre_peers_by_group(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char * group;
    const char *keywords[] = {"self", "group", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &group)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    zlist_t * peers = zyre_peers_by_group(self_ptr, group);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    PyObject * set = zlist_of_str_to_pyset(peers);
    zlist_destroy(&peers);
    return set;
}


PyObject * _wrap_xzyre_zyre_peers_by_group(PyObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[1] = {0,};
    retval = _wrap_zyre_peers_by_group(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    error_list = PyList_New(1);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}
PyObject * _wrap_xzyre_zyre_peers_by_group(PyObject *self, PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_peer_address(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *peer;
    const char *keywords[] = {"self", "peer", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s", (char **) keywords, &PyZyre_t_Type, &self, &peer)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_peer_address(self_ptr, peer);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_peer_address(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_peer_header_value(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    char *peer;
    char *name;
    const char *keywords[] = {"self", "peer", "name", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ss", (char **) keywords, &PyZyre_t_Type, &self, &peer, &name)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_peer_header_value(self_ptr, peer, name);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_peer_header_value(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_socket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    zsock_t *retval;
    PyThreadState *py_thread_state = NULL;
    PyZyre_t *self;
    zyre_t *self_ptr;
    const char *keywords[] = {"self", NULL};
    PyZsock_t *py_zsock_t;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyZyre_t_Type, &self)) {
        return NULL;
    }
    self_ptr = (self ? self->obj : NULL);

    if (PyEval_ThreadsInitialized ())
         py_thread_state = PyEval_SaveThread();

    retval = zyre_socket(self_ptr);

    if (py_thread_state)
         PyEval_RestoreThread(py_thread_state);

    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_zsock_t = PyObject_New(PyZsock_t, &PyZsock_t_Type);
    py_zsock_t->obj = retval;
    py_zsock_t->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_zsock_t);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_socket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_xzyre_zyre_version()
{
    PyObject *py_retval;
    uint64_t retval;

    retval = zyre_version();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}
PyObject * _wrap_xzyre_zyre_version();

static PyMethodDef xzyre_functions[] = {
    {(char *) "zpoller_new", (PyCFunction) _wrap_xzyre_zpoller_new, METH_NOARGS, "zpoller_new(NULL)\n\ntype: NULL: NULL" },
    {(char *) "zpoller_add", (PyCFunction) _wrap_xzyre_zpoller_add, METH_KEYWORDS|METH_VARARGS, "zpoller_add(self, reader)\n\ntype: self: zpoller_t *\ntype: reader: zsock_t *" },
    {(char *) "zpoller_wait", (PyCFunction) _wrap_xzyre_zpoller_wait, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zpoller_expired", (PyCFunction) _wrap_xzyre_zpoller_expired, METH_KEYWORDS|METH_VARARGS, "zpoller_expired(self)\n\ntype: self: zpoller_t *" },
    {(char *) "zmsg_new", (PyCFunction) _wrap_xzyre_zmsg_new, METH_NOARGS, "zmsg_new()\n\n" },
    {(char *) "zmsg_popstr", (PyCFunction) _wrap_xzyre_zmsg_popstr, METH_KEYWORDS|METH_VARARGS, "zmsg_popstr(self)\n\ntype: self: zmsg_t *" },
    {(char *) "zmsg_popbytes", (PyCFunction) _wrap_xzyre_zmsg_popbytes, METH_KEYWORDS|METH_VARARGS, "zmsg_popbytes(self)\n\ntype: self: zmsg_t *" },
    {(char *) "zmsg_pushstr", (PyCFunction) _wrap_xzyre_zmsg_pushstr, METH_KEYWORDS|METH_VARARGS, "zmsg_pushstr(self, string)\n\ntype: self: zmsg_t *\ntype: string: char const *" },
    {(char *) "zmsg_pushbytes", (PyCFunction) _wrap_xzyre_zmsg_pushbytes, METH_KEYWORDS|METH_VARARGS, "zmsg_pushbytes(self, string)\n\ntype: self: zmsg_t *\ntype: string: PYBYTE const *" },
    {(char *) "zyre_new", (PyCFunction) _wrap_xzyre_zyre_new, METH_KEYWORDS|METH_VARARGS, "zyre_new(name)\n\ntype: name: char *" },
    {(char *) "zyre_uuid", (PyCFunction) _wrap_xzyre_zyre_uuid, METH_KEYWORDS|METH_VARARGS, "zyre_uuid(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_name", (PyCFunction) _wrap_xzyre_zyre_name, METH_KEYWORDS|METH_VARARGS, "zyre_name(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_set_header", (PyCFunction) _wrap_xzyre_zyre_set_header, METH_KEYWORDS|METH_VARARGS, "zyre_set_header(self, name, value)\n\ntype: self: zyre_t *\ntype: name: char *\ntype: value: char *" },
    {(char *) "zyre_set_verbose", (PyCFunction) _wrap_xzyre_zyre_set_verbose, METH_KEYWORDS|METH_VARARGS, "zyre_set_verbose(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_set_evasive_timeout", (PyCFunction) _wrap_xzyre_zyre_set_evasive_timeout, METH_KEYWORDS|METH_VARARGS, "zyre_set_evasive_timeout(self, interval)\n\ntype: self: zyre_t *\ntype: interval: int" },
    {(char *) "zyre_set_expired_timeout", (PyCFunction) _wrap_xzyre_zyre_set_expired_timeout, METH_KEYWORDS|METH_VARARGS, "zyre_set_expired_timeout(self, interval)\n\ntype: self: zyre_t *\ntype: interval: int" },
    {(char *) "zyre_set_interval", (PyCFunction) _wrap_xzyre_zyre_set_interval, METH_KEYWORDS|METH_VARARGS, "zyre_set_interval(self, interval)\n\ntype: self: zyre_t *\ntype: interval: int" },
    {(char *) "zyre_set_endpoint", (PyCFunction) _wrap_xzyre_zyre_set_endpoint, METH_KEYWORDS|METH_VARARGS, "zyre_set_endpoint(self, value)\n\ntype: self: zyre_t *\ntype: value: char *" },
    {(char *) "zyre_gossip_bind", (PyCFunction) _wrap_xzyre_zyre_gossip_bind, METH_KEYWORDS|METH_VARARGS, "zyre_gossip_bind(self, value)\n\ntype: self: zyre_t *\ntype: value: char *" },
    {(char *) "zyre_gossip_connect", (PyCFunction) _wrap_xzyre_zyre_gossip_connect, METH_KEYWORDS|METH_VARARGS, "zyre_gossip_connect(self, value)\n\ntype: self: zyre_t *\ntype: value: char *" },
    {(char *) "zyre_start", (PyCFunction) _wrap_xzyre_zyre_start, METH_KEYWORDS|METH_VARARGS, "zyre_start(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_stop", (PyCFunction) _wrap_xzyre_zyre_stop, METH_KEYWORDS|METH_VARARGS, "zyre_stop(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_join", (PyCFunction) _wrap_xzyre_zyre_join, METH_KEYWORDS|METH_VARARGS, "zyre_join(self, group)\n\ntype: self: zyre_t *\ntype: group: char *" },
    {(char *) "zyre_leave", (PyCFunction) _wrap_xzyre_zyre_leave, METH_KEYWORDS|METH_VARARGS, "zyre_leave(self, group)\n\ntype: self: zyre_t *\ntype: group: char *" },
    {(char *) "zyre_recv", (PyCFunction) _wrap_xzyre_zyre_recv, METH_KEYWORDS|METH_VARARGS, "zyre_recv(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_whisper", (PyCFunction) _wrap_xzyre_zyre_whisper, METH_KEYWORDS|METH_VARARGS, "zyre_whisper(self, peer, msg)\n\ntype: self: zyre_t *\ntype: peer: char *\ntype: msg: zmsg_t **" },
    {(char *) "zyre_shout", (PyCFunction) _wrap_xzyre_zyre_shout, METH_KEYWORDS|METH_VARARGS, "zyre_shout(self, group, msg)\n\ntype: self: zyre_t *\ntype: group: char *\ntype: msg: zmsg_t **" },
    {(char *) "zyre_whispers", (PyCFunction) _wrap_xzyre_zyre_whispers, METH_KEYWORDS|METH_VARARGS, "zyre_whispers(self, peer, msg)\n\ntype: self: zyre_t *\ntype: peer: char *\ntype: msg: char *" },
    {(char *) "zyre_shouts", (PyCFunction) _wrap_xzyre_zyre_shouts, METH_KEYWORDS|METH_VARARGS, "zyre_shouts(self, group, msg)\n\ntype: self: zyre_t *\ntype: group: char *\ntype: msg: char *" },
    {(char *) "zyre_peers", (PyCFunction) _wrap_xzyre_zyre_peers, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zyre_own_groups", (PyCFunction) _wrap_xzyre_zyre_own_groups, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zyre_peer_groups", (PyCFunction) _wrap_xzyre_zyre_peer_groups, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zyre_peers_by_group", (PyCFunction) _wrap_xzyre_zyre_peers_by_group, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zyre_peer_address", (PyCFunction) _wrap_xzyre_zyre_peer_address, METH_KEYWORDS|METH_VARARGS, "zyre_peer_address(self, peer)\n\ntype: self: zyre_t *\ntype: peer: char *" },
    {(char *) "zyre_peer_header_value", (PyCFunction) _wrap_xzyre_zyre_peer_header_value, METH_KEYWORDS|METH_VARARGS, "zyre_peer_header_value(self, peer, name)\n\ntype: self: zyre_t *\ntype: peer: char *\ntype: name: char *" },
    {(char *) "zyre_socket", (PyCFunction) _wrap_xzyre_zyre_socket, METH_KEYWORDS|METH_VARARGS, "zyre_socket(self)\n\ntype: self: zyre_t *" },
    {(char *) "zyre_version", (PyCFunction) _wrap_xzyre_zyre_version, METH_NOARGS, "zyre_version()\n\n" },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */



static int
_wrap_PyZsock_t__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'zsock_t' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyZsock_t_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyZsock_t__tp_dealloc(PyZsock_t *self)
{
        zsock_t *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyZsock_t_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "xzyre.Zsock_t",            /* tp_name */
    sizeof(PyZsock_t),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyZsock_t__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyZsock_t_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyZsock_t__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyZpoller_t__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'zpoller_t' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyZpoller_t_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyZpoller_t__tp_dealloc(PyZpoller_t *self)
{
    if (self->obj) {
        zpoller_t *tmp = self->obj;
        self->obj = NULL;
        zpoller_destroy(&tmp);
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyZpoller_t_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "xzyre.Zpoller_t",            /* tp_name */
    sizeof(PyZpoller_t),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyZpoller_t__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyZpoller_t_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyZpoller_t__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyZmsg_t__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'zmsg_t' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyZmsg_t_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyZmsg_t__tp_dealloc(PyZmsg_t *self)
{
    if (self->obj) {
        zmsg_t *tmp = self->obj;
        self->obj = NULL;
        zmsg_destroy(&tmp);
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyZmsg_t_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "xzyre.Zmsg_t",            /* tp_name */
    sizeof(PyZmsg_t),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyZmsg_t__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyZmsg_t_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyZmsg_t__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyZyre_t__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'zyre_t' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyZyre_t_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyZyre_t__tp_dealloc(PyZyre_t *self)
{
    if (self->obj) {
        zyre_t *tmp = self->obj;
        self->obj = NULL;
        zyre_destroy(&tmp);
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyZyre_t_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "xzyre.Zyre_t",            /* tp_name */
    sizeof(PyZyre_t),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyZyre_t__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyZyre_t_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyZyre_t__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef xzyre_moduledef = {
    PyModuleDef_HEAD_INIT,
    "xzyre",
    NULL,
    -1,
    xzyre_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(xzyre)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&xzyre_moduledef);
    #else
    m = Py_InitModule3((char *) "xzyre", xzyre_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Register the 'zsock_t' class */
    if (PyType_Ready(&PyZsock_t_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "zsock_t", (PyObject *) &PyZsock_t_Type);
    /* Register the 'zpoller_t' class */
    if (PyType_Ready(&PyZpoller_t_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "zpoller_t", (PyObject *) &PyZpoller_t_Type);
    /* Register the 'zmsg_t' class */
    if (PyType_Ready(&PyZmsg_t_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "zmsg_t", (PyObject *) &PyZmsg_t_Type);
    /* Register the 'zyre_t' class */
    if (PyType_Ready(&PyZyre_t_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "zyre_t", (PyObject *) &PyZyre_t_Type);
    PyModule_AddObject(m, (char *) "_zsock_t", (PyObject *) &PyZsock_t_Type);
    PyModule_AddObject(m, (char *) "_zpoller_t", (PyObject *) &PyZpoller_t_Type);
    PyModule_AddObject(m, (char *) "_zmsg_t", (PyObject *) &PyZmsg_t_Type);
    PyModule_AddObject(m, (char *) "_zyre_t", (PyObject *) &PyZyre_t_Type);
    return MOD_RETURN(m);
}
